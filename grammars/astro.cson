scopeName: 'source.astro'
name: 'Astro'
fileTypes: [
		'astro',
    'ast'
]
patterns: [
	{
		include: "#non_astro"
	}
	{
		include: "#numbers"
	}
	{
		include: "#macros"
	}
	{
		include: "#lambdas"
	}
	{
		include: "#multiline_comments"
	}
	{
		include: "#single_line_comments"
	}
	{
		include: "#type_annotation"
	}
	{
		include: "#dot_notation"
	}
	{
		include: "#keywords"
	}
	{
		include: "#function_calls"
	}
	{
		include: "#multiple_declaration"
	}
	{
		include: "#command_notation"
	}
	{
		include: "#unquoted"
	}
	{
		include: "#multiline_strings"
	}
	{
		include: "#single_line_strings"
	}
	{
		include: "#regex"
	}
	{
		include: "#operators"
	}
]
repository:
	non_astro:
		patterns: [
			{
				begin: "^\\s*-\\s+[^>].*"
				end: "$"
				name: "support.function.macro.astro"
			}
		]
	numbers:
		patterns: [
			{
				match: "\\b0x(_?[A-Fa-f0-9])*((\\.(_?[A-Fa-f0-9])+)?(p[+-]?)?[A-Fa-f0-9_]+)?"
				name: "constant.numeric.astro"
			}
			{
				match: "\\b0o(_?[0-8])*((\\.(_?[0-8])+)?(p[+-]?)?[0-8_]+)?"
				name: "constant.numeric.astro"
			}
			{
				match: "\\b0b(_?[01])*((\\.(_?[01])+)?(p[+-]?)?[01_]+)?"
				name: "constant.numeric.astro"
			}
			{
				match: "\\b[0-9](_?[0-9])*((\\.(_?[0-9])+)?(e[+-]?)?(_?[0-9])+)?"
				name: "constant.numeric.astro"
			}
		]
	macros:
		patterns: [
			{
				match: "@(?:[A-Za-z_][_A-Za-z0-9]*)|@\\(.+\\)"
				name: "support.function.macro.astro"
			}
		]
	lambdas:
		patterns: [
			{
				match: "(\\(.+\\)|[A-Za-z_0-9]+)\\s*(?=\\=\\>)"
				name: "entity.name.function.astro"
			}
		]
	multiline_comments:
		patterns: [
			{
				begin: "#-"
				beginCaptures:
					"0":
						name: "punctuation.definition.comment.begin.astro"
				end: "-#"
				endCaptures:
					"0":
						name: "punctuation.definition.comment.end.astro"
				name: "comment.block.astro"
				patterns: [
					{
						include: "#multiline_comments"
					}
				]
			}
		]
	single_line_comments:
		patterns: [
			{
				begin: "#"
				beginCaptures:
					"0":
						name: "punctuation.definition.comment.astro"
				end: "$"
				name: "comment.line.astro"
			}
		]
	type_annotation:
		patterns: [
			{
				begin: "::|>:|<:"
				beginCaptures:
					"0":
						name: "punctuation.definition.comment.astro"
				end: "(?=;|$)"
				name: "comment.line.astro"
			}
		]
	dot_notation:
		patterns: [
			{
				match: "(?<!\\.)((\\.|:)[A-Za-z_][_A-Za-z0-9]*!?\\.?)"
				captures:
					"1":
						name: "variable.language.astro"
			}
		]
	keywords:
		patterns: [
			{
				match: "\\b(?:true|false|nil)\\b"
				name: "constant.language.astro"
			}
			{
				match: "\\b(?:for|end|if|where|\\?|else|elif|async|await|return|delegate|yield|from|while|do|loop|try|ensure|defer|raise|continue|break|fallthrough|pass|export|except|import)\\b"
				name: "keyword.control.astro"
			}
			{
				match: "\\b(?:type|fun|let|var|NaN|iso|ref|const|as)\\b"
				name: "storage.modifier.astro"
			}
		]
	function_calls:
		patterns: [
			{
				match: "(([A-Za-z_][_A-Za-z0-9]*|(=|\\||\\&|\\>|\\<|!|\\+|-|\\*|\\/|\\^|%|\\?|≥|≤|≠|≈|×|±|÷)+)!?\\.?)(?=\\s*(\\{.+\\}\\s*)?\\()"
				name: "entity.name.function.astro"
			}
			{
				match: ":(?=\\()"
				name: "entity.name.function.astro"
			}
		]
	multiple_declaration:
		patterns: [
			{
				match: "[A-Za-z_][_A-Za-z0-9]*( (?!where )[A-Za-z_][_A-Za-z0-9]*)+\\s*(?=[+-/*]?\\=)"
				name: "astro"
			}
		]
	command_notation:
		patterns: [
			{
				match: "(?<!let |var |import )([^\\=|\\:|\\;|,|\\.|\\<|\\>|'|\"|\\*|\\/|\\-|\\+|\\^|\\%|≥|≤|≠|≈|×|±|÷|\\\\|\\}|\\{|\\)|\\(|\\!|\\&|\\$|\\@|\\||\\~|type|fun|let|var|as|for|end|if|where|\\?|else|elif|async|await|return|yield|from|while|do|with|loop|try|ensure|defer|raise|continue|break|fallthrough|pass|export|except|import|const|NaN|iso|ref|const|and|or|in|not|mod|is|typeof]|\\b[a-zA-Z_][A-Za-z_0-9]*!?)\\s+(?=[A-Za-z_0-9]+|\"|'|@|\\$|\\{|\\[|\\(|/[^/]+/\\s*(?!(\\s*[\\{\\[\\(a-zA-Z0-9@$])|=|\\||\\&|\\>|\\<|!|\\+|-|\\*|\\/|\\^|%|\\?|≥|≤|≠|≈|×|±|÷))(?!(if|else|for|end|while|and|or|as|where|iso|ref|in|not|mod|is|typeof|except)\\b)"
				name: "entity.name.function.astro"
			}
		]
	unquoted:
		patterns: [
			{
				match: "(?<=[_a-zA-Z0-9})\\]])'"
				name: "astro"
			}
		]
	multiline_strings:
		patterns: [
			{
				begin: "'''"
				beginCaptures:
					"0":
						name: "punctuation.definition.string.begin.astro"
				end: "'''"
				endCaptures:
					"0":
						name: "punctuation.definition.string.end.astro"
				name: "string.quoted.single.astro"
			}
			{
				begin: "\"\"\""
				beginCaptures:
					"0":
						name: "punctuation.definition.string.begin.astro"
				end: "\"\"\""
				endCaptures:
					"0":
						name: "punctuation.definition.string.end.astro"
				name: "string.quoted.double.astro"
			}
		]
	single_line_strings:
		patterns: [
			{
				begin: "'"
				beginCaptures:
					"0":
						name: "punctuation.definition.string.begin.astro"
				end: "'"
				endCaptures:
					"0":
						name: "punctuation.definition.string.end.astro"
				name: "string.quoted.single.astro"
				patterns: [
					{
						include: "#string_escaped_chars"
					}
					{
						include: "#string_interpolate"
					}
				]
			}
			{
				begin: "\""
				beginCaptures:
					"0":
						name: "punctuation.definition.string.begin.astro"
				end: "\""
				endCaptures:
					"0":
						name: "punctuation.definition.string.end.astro"
				name: "string.quoted.double.astro"
				patterns: [
					{
						include: "#string_escaped_chars"
					}
					{
						include: "#string_interpolate"
					}
				]
			}
		]
	string_escaped_chars:
		patterns: [
			{
				match: "\\\\(t|n|r|b|q|\"|'|\\$|\\\\)"
				name: "constant.character.escape.astro"
			}
		]
	string_interpolate:
		patterns: [
			{
				begin: "\\$(|.+|)?\\{"
				end: "\\}"
				name: "constant.character.escape.astro"
				patterns: [
					{
						include: "$self"
					}
				]
			}
			{
				match: "\\$[A-Za-z0-9_]+"
				name: "constant.character.escape.astro"
			}
		]
	regex:
		patterns: [
			{
				match: "/[^/]+/\\s*(?!(\\s*[\\{\\[\\(a-zA-Z0-9@$])|=|\\||\\&|\\>|\\<|!|\\+|-|\\*|\\/|\\^|%|\\?|≥|≤|≠|≈|×|±|÷)"
				name: "string.quoted.single.astro"
			},
			{
				match: "/[^/]+/\\s+(?=and|or|not|mod|)"
				name: "string.quoted.single.astro"
			}
		]
	operators:
		patterns: [
			{
				match: "\\.?(=|\\||\\&|\\>|\\<|!|\\+|-|\\*|\\/|\\^|%|\\?|≥|≤|≠|≈|×|±|÷)+|\\b(and|or|not|mod|typeof)\\b"
				name: "keyword.operator.astro"
			}
		]
